package com.orient.padtemplate.core.data.dao;

import java.util.Map;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.AbstractDaoSession;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.identityscope.IdentityScopeType;
import org.greenrobot.greendao.internal.DaoConfig;

import com.orient.padtemplate.core.data.db.Table;
import com.orient.padtemplate.core.data.db.User;
import com.orient.padtemplate.core.data.db.Flow;
import com.orient.padtemplate.core.data.db.Task;
import com.orient.padtemplate.core.data.db.Cell;
import com.orient.padtemplate.core.data.db.Trouble;

import com.orient.padtemplate.core.data.dao.TableDao;
import com.orient.padtemplate.core.data.dao.UserDao;
import com.orient.padtemplate.core.data.dao.FlowDao;
import com.orient.padtemplate.core.data.dao.TaskDao;
import com.orient.padtemplate.core.data.dao.CellDao;
import com.orient.padtemplate.core.data.dao.TroubleDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see org.greenrobot.greendao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig tableDaoConfig;
    private final DaoConfig userDaoConfig;
    private final DaoConfig flowDaoConfig;
    private final DaoConfig taskDaoConfig;
    private final DaoConfig cellDaoConfig;
    private final DaoConfig troubleDaoConfig;

    private final TableDao tableDao;
    private final UserDao userDao;
    private final FlowDao flowDao;
    private final TaskDao taskDao;
    private final CellDao cellDao;
    private final TroubleDao troubleDao;

    public DaoSession(Database db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        tableDaoConfig = daoConfigMap.get(TableDao.class).clone();
        tableDaoConfig.initIdentityScope(type);

        userDaoConfig = daoConfigMap.get(UserDao.class).clone();
        userDaoConfig.initIdentityScope(type);

        flowDaoConfig = daoConfigMap.get(FlowDao.class).clone();
        flowDaoConfig.initIdentityScope(type);

        taskDaoConfig = daoConfigMap.get(TaskDao.class).clone();
        taskDaoConfig.initIdentityScope(type);

        cellDaoConfig = daoConfigMap.get(CellDao.class).clone();
        cellDaoConfig.initIdentityScope(type);

        troubleDaoConfig = daoConfigMap.get(TroubleDao.class).clone();
        troubleDaoConfig.initIdentityScope(type);

        tableDao = new TableDao(tableDaoConfig, this);
        userDao = new UserDao(userDaoConfig, this);
        flowDao = new FlowDao(flowDaoConfig, this);
        taskDao = new TaskDao(taskDaoConfig, this);
        cellDao = new CellDao(cellDaoConfig, this);
        troubleDao = new TroubleDao(troubleDaoConfig, this);

        registerDao(Table.class, tableDao);
        registerDao(User.class, userDao);
        registerDao(Flow.class, flowDao);
        registerDao(Task.class, taskDao);
        registerDao(Cell.class, cellDao);
        registerDao(Trouble.class, troubleDao);
    }
    
    public void clear() {
        tableDaoConfig.clearIdentityScope();
        userDaoConfig.clearIdentityScope();
        flowDaoConfig.clearIdentityScope();
        taskDaoConfig.clearIdentityScope();
        cellDaoConfig.clearIdentityScope();
        troubleDaoConfig.clearIdentityScope();
    }

    public TableDao getTableDao() {
        return tableDao;
    }

    public UserDao getUserDao() {
        return userDao;
    }

    public FlowDao getFlowDao() {
        return flowDao;
    }

    public TaskDao getTaskDao() {
        return taskDao;
    }

    public CellDao getCellDao() {
        return cellDao;
    }

    public TroubleDao getTroubleDao() {
        return troubleDao;
    }

}
