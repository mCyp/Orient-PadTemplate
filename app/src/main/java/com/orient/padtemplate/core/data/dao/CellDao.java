package com.orient.padtemplate.core.data.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.orient.padtemplate.core.data.db.Table;

import com.orient.padtemplate.core.data.db.Cell;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CELL".
*/
public class CellDao extends AbstractDao<Cell, String> {

    public static final String TABLENAME = "CELL";

    /**
     * Properties of entity Cell.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Row = new Property(1, int.class, "row", false, "ROW");
        public final static Property Col = new Property(2, int.class, "col", false, "COL");
        public final static Property Type = new Property(3, int.class, "type", false, "TYPE");
        public final static Property LabelName = new Property(4, String.class, "labelName", false, "LABEL_NAME");
        public final static Property InputValue = new Property(5, String.class, "inputValue", false, "INPUT_VALUE");
        public final static Property IsTitle = new Property(6, boolean.class, "isTitle", false, "IS_TITLE");
        public final static Property Path = new Property(7, String.class, "path", false, "PATH");
        public final static Property TableId = new Property(8, String.class, "tableId", false, "TABLE_ID");
    }

    private DaoSession daoSession;


    public CellDao(DaoConfig config) {
        super(config);
    }
    
    public CellDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CELL\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"ROW\" INTEGER NOT NULL ," + // 1: row
                "\"COL\" INTEGER NOT NULL ," + // 2: col
                "\"TYPE\" INTEGER NOT NULL ," + // 3: type
                "\"LABEL_NAME\" TEXT," + // 4: labelName
                "\"INPUT_VALUE\" TEXT," + // 5: inputValue
                "\"IS_TITLE\" INTEGER NOT NULL ," + // 6: isTitle
                "\"PATH\" TEXT," + // 7: path
                "\"TABLE_ID\" TEXT);"); // 8: tableId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CELL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Cell entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
        stmt.bindLong(2, entity.getRow());
        stmt.bindLong(3, entity.getCol());
        stmt.bindLong(4, entity.getType());
 
        String labelName = entity.getLabelName();
        if (labelName != null) {
            stmt.bindString(5, labelName);
        }
 
        String inputValue = entity.getInputValue();
        if (inputValue != null) {
            stmt.bindString(6, inputValue);
        }
        stmt.bindLong(7, entity.getIsTitle() ? 1L: 0L);
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(8, path);
        }
 
        String tableId = entity.getTableId();
        if (tableId != null) {
            stmt.bindString(9, tableId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Cell entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
        stmt.bindLong(2, entity.getRow());
        stmt.bindLong(3, entity.getCol());
        stmt.bindLong(4, entity.getType());
 
        String labelName = entity.getLabelName();
        if (labelName != null) {
            stmt.bindString(5, labelName);
        }
 
        String inputValue = entity.getInputValue();
        if (inputValue != null) {
            stmt.bindString(6, inputValue);
        }
        stmt.bindLong(7, entity.getIsTitle() ? 1L: 0L);
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(8, path);
        }
 
        String tableId = entity.getTableId();
        if (tableId != null) {
            stmt.bindString(9, tableId);
        }
    }

    @Override
    protected final void attachEntity(Cell entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Cell readEntity(Cursor cursor, int offset) {
        Cell entity = new Cell( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.getInt(offset + 1), // row
            cursor.getInt(offset + 2), // col
            cursor.getInt(offset + 3), // type
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // labelName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // inputValue
            cursor.getShort(offset + 6) != 0, // isTitle
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // path
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // tableId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Cell entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setRow(cursor.getInt(offset + 1));
        entity.setCol(cursor.getInt(offset + 2));
        entity.setType(cursor.getInt(offset + 3));
        entity.setLabelName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setInputValue(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsTitle(cursor.getShort(offset + 6) != 0);
        entity.setPath(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTableId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Cell entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(Cell entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Cell entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getTableDao().getAllColumns());
            builder.append(" FROM CELL T");
            builder.append(" LEFT JOIN TABLE T0 ON T.\"TABLE_ID\"=T0.\"ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Cell loadCurrentDeep(Cursor cursor, boolean lock) {
        Cell entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Table table = loadCurrentOther(daoSession.getTableDao(), cursor, offset);
        entity.setTable(table);

        return entity;    
    }

    public Cell loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Cell> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Cell> list = new ArrayList<Cell>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Cell> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Cell> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
